apply plugin: "kotlin-multiplatform"
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.android.library'
apply plugin: 'org.jetbrains.kotlin.native.cocoapods'
apply plugin: 'org.jetbrains.dokka'

version = release.versionName
archivesBaseName = POM_ARTIFACT_ID

android {
    compileSdkVersion setup.compileSdk
    buildToolsVersion setup.buildTools

    defaultConfig {
        minSdkVersion setup.minSdk
        targetSdkVersion setup.targetSdk
        versionCode release.versionCode
        versionName release.versionName
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

kotlin {
    targets {
        final def iOSTarget = System.getenv("SDK_NAME")?.startsWith("iphoneos") ? presets.iosArm64 : presets.iosX64
        fromPreset(iOSTarget, "ios") {
            binaries {
                framework("library")
            }
        }
        fromPreset(presets.android, "android")
        fromPreset(presets.jvm, "jvm")
        fromPreset(presets.js, "js") {
            browser {
            }
        }
        fromPreset(presets.macosX64, "macos")
    }

    android {
        publishLibraryVariants("release")
    }

    cocoapods {
        summary = "Kotlin multiplatform storyblok SDK"
        homepage = "https://github.com/mikepenz/storyblok-mp-SDK"
        authors = "Mike Penz"
        license = "Apache 2.0"
    }
}

dependencies {
    // Kotlin
    commonMainImplementation "org.jetbrains.kotlin:kotlin-stdlib-common:${setup.kotlin}"
    androidMainImplementation "org.jetbrains.kotlin:kotlin-stdlib:${setup.kotlin}"

    jvmMainImplementation "org.jetbrains.kotlin:kotlin-stdlib:${setup.kotlin}"

    // Coroutines
    commonMainImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.kotlinCoroutines}"

    androidMainImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.kotlinCoroutines}"
    jvmMainImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.kotlinCoroutines}"
    //iosMainImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:${versions.kotlinCoroutines}"
    jsMainImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:${versions.kotlinCoroutines}"

    // Ktor
    commonMainImplementation "io.ktor:ktor-client-core:${versions.ktor}"
    commonMainImplementation "io.ktor:ktor-client-json:${versions.ktor}"
    commonMainImplementation "io.ktor:ktor-client-logging:${versions.ktor}"
    commonMainImplementation "io.ktor:ktor-client-serialization:${versions.ktor}"

    androidMainImplementation "io.ktor:ktor-client-android:${versions.ktor}"
    jvmMainImplementation "io.ktor:ktor-client-apache:${versions.ktor}"
    iosMainImplementation "io.ktor:ktor-client-ios:${versions.ktor}"
    macosMainImplementation "io.ktor:ktor-client-curl:${versions.ktor}"
    jsMainImplementation "io.ktor:ktor-client-js:${versions.ktor}"

    // Serialize
    commonMainImplementation "org.jetbrains.kotlinx:kotlinx-serialization-json:${versions.kotlinxSerialization}"
}

compileKotlinJs {
    kotlinOptions.metaInfo = true
    kotlinOptions.sourceMap = true
    kotlinOptions.moduleKind = 'umd'
}

dokkaHtml.configure {
    dokkaSourceSets {
        configureEach {
            noAndroidSdkLink.set(false)
            outputDirectory.set(buildDir.resolve("dokka"))
        }
    }
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from "$buildDir/javadoc"
}

apply from: rootProject.file('gradle/publishing.gradle')