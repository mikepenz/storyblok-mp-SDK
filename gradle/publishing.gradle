apply plugin: 'maven-publish'
apply plugin: 'signing'
apply from: project.rootProject.file('gradle/maven-metadata.gradle')

ext["signing.keyId"] = project.hasProperty('sonatype.gpg.key') ? project.property('sonatype.gpg.key') : System.getenv('SONATYPE_GPG_KEY')
ext["signing.password"] = project.hasProperty('sonatype.gpg.password') ? project.property('sonatype.gpg.password') : System.getenv('SONATYPE_GPG_PASS')
ext["signing.secretKeyRingFile"] = project.hasProperty('sonatype.gpg.secretKeyRingFile') ? project.property('sonatype.gpg.secretKeyRingFile') : System.getenv('SONATYPE_GPG_FILE')

@SuppressWarnings("GroovyUnusedDeclaration")
def getRepositoryUsername() {
    return project.hasProperty('NEXUS_USERNAME') ? project.property('NEXUS_USERNAME') : System.getenv('NEXUS_USERNAME')
}

@SuppressWarnings("GroovyUnusedDeclaration")
def getRepositoryPassword() {
    return project.hasProperty('NEXUS_PASSWORD') ? project.property('NEXUS_PASSWORD') : System.getenv('NEXUS_PASSWORD')
}

task stubJavadoc(type: Jar) {
    archiveClassifier = 'javadoc'
}

task stubSources(type: Jar) {
    classifier = 'sources'
}

task emptyJar(type: Jar) {
}

afterEvaluate {
    task mainSourcesJar(type: Jar) {
        classifier = 'sources'
        from kotlin.sourceSets.commonMain.kotlin
    }
}

afterEvaluate {
    publishing {
        def variantName = "${project.name}"
        publications.all {
            def type = it.name
            logger.info("Configuring $type")
            switch (type) {
                case 'kotlinMultiplatform':
                    // With Kotlin 1.4.0, the root module ID has no suffix, but for compatibility with
                    // the consumers who can't read Gradle module metadata, we publish the JVM artifacts in it
                    it.artifactId = variantName
                    apply from: "$rootDir/gradle/publish-mpp-root-module-in-platform.gradle"
                    publishPlatformArtifactsInRootModule(publications["jvm"])
                    break
                case 'metadata':
                case 'jvm':
                case 'js':
                    it.artifactId = "$variantName-$type"
                    break
            }
            logger.info("Artifact id = ${it.artifactId}")

            pom.withXml(configureMavenCentralMetadata)

            // The 'root' module publishes the JVM module's Javadoc JAR as per publishPlatformArtifactsInRootModule, and
            // every other module should publish an empty Javadoc JAR. TODO: provide proper documentation artifacts?
            if (name != "kotlinMultiplatform")
                artifact stubJavadoc
        }
    }
}

publishing {
    repositories {
        maven {
            name = "sonatype"
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username getRepositoryUsername()
                password getRepositoryPassword()
            }
        }
    }
}

signing {
    sign publishing.publications
}