apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'

ext["signing.keyId"] = project.hasProperty('sonatype.gpg.key') ? project.property('sonatype.gpg.key') : System.getenv('SONATYPE_GPG_KEY')
ext["signing.password"] = project.hasProperty('sonatype.gpg.password') ? project.property('sonatype.gpg.password') : System.getenv('SONATYPE_GPG_PASS')
ext["signing.secretKeyRingFile"] = project.hasProperty('sonatype.gpg.secretKeyRingFile') ? project.property('sonatype.gpg.secretKeyRingFile') : System.getenv('SONATYPE_GPG_FILE')

@SuppressWarnings("GroovyUnusedDeclaration")
def getRepositoryUsername() {
    return project.hasProperty('NEXUS_USERNAME') ? project.property('NEXUS_USERNAME') : System.getenv('NEXUS_USERNAME')
}

@SuppressWarnings("GroovyUnusedDeclaration")
def getRepositoryPassword() {
    return project.hasProperty('NEXUS_PASSWORD') ? project.property('NEXUS_PASSWORD') : System.getenv('NEXUS_PASSWORD')
}

afterEvaluate { project ->
    task stubSources(type: Jar) {
        classifier = 'sources'
    }

    task emptyJar(type: Jar) {
    }

    task mainSourcesJar(type: Jar) {
        classifier = 'sources'
        from kotlin.sourceSets.commonMain.kotlin
    }

    def pomConfig = {
        licenses {
            license {
                name POM_LICENCE_NAME
                url POM_LICENCE_URL
                distribution POM_LICENCE_DIST
            }
        }
        developers {
            developer {
                id POM_DEVELOPER_ID
                name POM_DEVELOPER_NAME
                email 'mikepenz@gmail.com'
            }
        }
        scm {
            url POM_SCM_URL
            connection POM_SCM_CONNECTION
            developerConnection POM_SCM_DEV_CONNECTION
        }
    }

    publishing {
        publications.all {
            artifact javadocJar

            pom.withXml {
                asNode().appendNode('name', POM_NAME)
                asNode().appendNode('description', POM_DESCRIPTION)
                asNode().appendNode('url', POM_SCM_URL)
                asNode().children().last() + pomConfig
            }
        }

        repositories {
            maven {
                name = "sonatype"
                def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                credentials {
                    username getRepositoryUsername()
                    password getRepositoryPassword()
                }
            }
        }
    }
}

signing {
    sign publishing.publications
}