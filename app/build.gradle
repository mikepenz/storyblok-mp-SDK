plugins {
    id "com.android.application"
    id "kotlin-android"
    id "org.jetbrains.kotlin.kapt"
    id "com.mikepenz.aboutlibraries.plugin"
}

if (getSigningFile() != null) {
    apply from: "${getSigningFile()}"
}

android {
    compileSdkVersion setup.compileSdk
    buildToolsVersion setup.buildTools

    defaultConfig {
        minSdkVersion setup.minSdk
        targetSdkVersion setup.targetSdk
        versionCode release.versionCode
        versionName release.versionName

        setProperty("archivesBaseName", "StoryBlok-v$versionName-c$versionCode")
        buildConfigField "String", "STORYBLOK_TOKEN", "\"" + getProps("storyblok.token") + "\""

        missingDimensionStrategy 'platform', 'android', 'jvm'
    }

    buildTypes {
        debug {
            if (getSigningFile() != null) {
                signingConfig signingConfigs.debug
            }

            versionNameSuffix "-DEBUG"
            minifyEnabled false
        }
        release {
            if (getSigningFile() != null) {
                signingConfig signingConfigs.release
            }

            zipAlignEnabled true
            minifyEnabled false
        }
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/storyblok-mp-sdk.kotlin_module'
        exclude 'META-INF/ktor-client-serialization.kotlin_module'
        exclude 'META-INF/ktor-http.kotlin_module'
        exclude 'META-INF/ktor-utils.kotlin_module'
        exclude 'META-INF/kotlinx-coroutines-core.kotlin_module'
        exclude 'META-INF/kotlinx-serialization-runtime.kotlin_module'
        exclude 'META-INF/ktor-io.kotlin_module'
        exclude 'META-INF/ktor-http-cio.kotlin_module'
        exclude 'META-INF/ktor-client-json.kotlin_module'
        exclude 'META-INF/ktor-client-logging.kotlin_module'
        exclude 'META-INF/ktor-client-core.kotlin_module'
    }

    configurations {
        androidTestApi {}
        androidTestDebugApi {}
        androidTestReleaseApi {}
        testApi {}
        testDebugApi {}
        testReleaseApi {}
    }
}

dependencies {
    implementation project(path: ':sample-common')
    // implementation "com.mikepenz:storyblok-mp-sdk-android:0.0.6"

    implementation "androidx.drawerlayout:drawerlayout:${versions.drawerlayout}"
    implementation "androidx.constraintlayout:constraintlayout:${versions.constraintLayout}"
    implementation "androidx.appcompat:appcompat:${versions.appcompat}"
    implementation "androidx.recyclerview:recyclerview:${versions.recyclerView}"
    implementation "androidx.cardview:cardview:${versions.cardView}"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.kotlinCoroutines}"

    implementation "androidx.activity:activity-ktx:${versions.activityKtx}"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:${versions.lifecycleKtx}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.viewModelKtx}"

    // used to fill the RecyclerView with the DrawerItems
    // and provides single and multi selection, expandable items
    // https://github.com/mikepenz/FastAdapter
    implementation "com.mikepenz:fastadapter:${versions.fastadapter}"

    //used to generate the drawer on the left
    //https://github.com/mikepenz/MaterialDrawer
    implementation "com.mikepenz:materialdrawer:${versions.materialdrawer}"
    implementation "com.mikepenz:materialdrawer-iconics:${versions.materialdrawer}"

    //used to display the icons in the drawer
    //https://github.com/mikepenz/Android-Iconics
    implementation "com.mikepenz:iconics-core:${versions.iconics}"
    implementation "com.mikepenz:material-design-iconic-typeface:2.2.0.8-kotlin"

    //used to generate the Open Source section
    //https://github.com/mikepenz/AboutLibraries
    implementation "com.mikepenz:aboutlibraries:${versions.aboutLibraries}"
}

def getProps(String propName) {
    def propsFile = rootProject.file('local.properties')
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        return props[propName]
    } else {
        return ""
    }
}