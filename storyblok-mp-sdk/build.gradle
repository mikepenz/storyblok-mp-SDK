apply plugin: "com.android.library"
apply plugin: "kotlin-multiplatform"
apply plugin: "kotlinx-serialization"
apply plugin: "org.jetbrains.kotlin.native.cocoapods"
apply plugin: "org.jetbrains.dokka"

version = release.versionName
archivesBaseName = POM_ARTIFACT_ID

android {
    compileSdkVersion setup.compileSdk
    buildToolsVersion setup.buildTools

    defaultConfig {
        minSdkVersion setup.minSdk
        targetSdkVersion setup.targetSdk
        versionCode release.versionCode
        versionName release.versionName
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    publishing {
        multipleVariants {
            allVariants()
            withSourcesJar()
            withJavadocJar()
        }
    }
}

kotlin {
    jvm()

    js {
        nodejs {}
        browser {}
        compilations.all {
            kotlinOptions {
                moduleKind = "umd"
                sourceMap = true
                sourceMapEmbedSources = null
            }
        }
    }

    iosX64()
    iosArm32()
    iosArm64()
    tvosX64()
    tvosArm64()
    watchosX86()
    watchosX64()
    watchosArm32()
    watchosArm64()
    macosX64()
    macosArm64()
    mingwX64()
    linuxX64()

   android {
       publishAllLibraryVariants()
   }

    cocoapods {
        summary = "Kotlin multiplatform storyblok SDK"
        homepage = "https://github.com/mikepenz/storyblok-mp-SDK"
        authors = "Mike Penz"
        license = "Apache 2.0"
    }

    sourceSets {

        /* ==========================================================================
          TARGETS                            SOURCE SETS
          -------         ----------------------------------------------
         js -----------------------------------------------------+
                                                                 |
                                                                 V
         jvm -----------------------------------------------> common
                                                                ^
         ios     \                                              |
         macos   | ---> nativeDarwin ---> native------------- --+
         tvos    |                         ^
         watchos /                         |
                                           |
         linux  \  ---> nativeOther -------+
         mingw  /
       ========================================================================== */


        nativeMain { dependsOn(commonMain) }

        nativeOther { dependsOn(nativeMain) }
        linuxX64Main { dependsOn(nativeOther) }
        mingwX64Main { dependsOn(nativeOther) }

        nativeDarwin { dependsOn(nativeMain) }
        macosX64Main { dependsOn(nativeDarwin) }
        macosArm64Main { dependsOn(nativeDarwin) }

        iosMain { dependsOn(commonMain) }
        iosArm64Main { dependsOn(iosMain) }
        iosArm32Main { dependsOn(iosMain) }
        iosX64Main { dependsOn(iosMain) }
        tvosArm64Main { dependsOn(iosMain) }
        tvosX64Main { dependsOn(iosMain) }
        watchosArm32Main { dependsOn(iosMain) }
        watchosArm64Main { dependsOn(iosMain) }
        watchosX86Main { dependsOn(iosMain) }
        watchosX64Main { dependsOn(iosMain) }
    }
}

dependencies {
    // Kotlin
    commonMainImplementation "org.jetbrains.kotlin:kotlin-stdlib-common:${setup.kotlin}"

    // Coroutines
    commonMainImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.kotlinCoroutines}"

    // Ktor
    commonMainImplementation "io.ktor:ktor-client-core:${versions.ktor}"
    commonMainImplementation "io.ktor:ktor-client-logging:${versions.ktor}"
    commonMainImplementation "io.ktor:ktor-client-content-negotiation:${versions.ktor}"
    commonMainImplementation "io.ktor:ktor-serialization-kotlinx-json:${versions.ktor}"

    androidMainImplementation "io.ktor:ktor-client-android:${versions.ktor}"
    jvmMainImplementation "io.ktor:ktor-client-apache:${versions.ktor}"
    iosMainImplementation "io.ktor:ktor-client-ios:${versions.ktor}"
    nativeDarwinImplementation "io.ktor:ktor-client-darwin:${versions.ktor}"
    nativeOtherImplementation "io.ktor:ktor-client-curl:${versions.ktor}"
    jsMainImplementation "io.ktor:ktor-client-js:${versions.ktor}"

    // kotlinx Serialize
    commonMainImplementation "org.jetbrains.kotlinx:kotlinx-serialization-json:${versions.kotlinxSerialization}"
}

dokkaHtml.configure {
    dokkaSourceSets {
        configureEach {
            noAndroidSdkLink.set(false)
        }
    }
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from "$buildDir/javadoc"
}

apply from: "$rootDir/gradle/gradle-mvn-push.gradle"