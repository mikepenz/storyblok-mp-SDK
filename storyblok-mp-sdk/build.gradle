apply plugin: 'com.android.library'
apply plugin: "kotlin-multiplatform"
apply plugin: 'kotlinx-serialization'
apply plugin: 'org.jetbrains.kotlin.native.cocoapods'
apply plugin: 'org.jetbrains.dokka'

version = release.versionName
archivesBaseName = POM_ARTIFACT_ID

android {
    compileSdkVersion setup.compileSdk
    buildToolsVersion setup.buildTools

    defaultConfig {
        minSdkVersion setup.minSdk
        targetSdkVersion setup.targetSdk
        versionCode release.versionCode
        versionName release.versionName
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

kotlin {
    targets {
        targetFromPreset(presets.linuxX64, 'linuxX64')
        //targetFromPreset(presets.mingwX64, 'mingwX64')
        targetFromPreset(presets.macosX64, 'macosX64')

        targetFromPreset(presets.iosArm64, 'iosArm64')
        targetFromPreset(presets.iosArm32, 'iosArm32')
        targetFromPreset(presets.iosX64, 'iosX64')
        targetFromPreset(presets.tvosArm64, 'tvosArm64')
        targetFromPreset(presets.tvosX64, 'tvosX64')
        targetFromPreset(presets.watchosArm32, 'watchosArm32')
        targetFromPreset(presets.watchosArm64, 'watchosArm64')
        targetFromPreset(presets.watchosX86, 'watchosX86')

        targetFromPreset(presets.android, "android")
        targetFromPreset(presets.jvm, "jvm")
        targetFromPreset(presets.js, "js") {
            browser {
            }
        }
    }

   android {
       publishLibraryVariants("release")
   }

    cocoapods {
        summary = "Kotlin multiplatform storyblok SDK"
        homepage = "https://github.com/mikepenz/storyblok-mp-SDK"
        authors = "Mike Penz"
        license = "Apache 2.0"
    }

    sourceSets {
        desktopMain { dependsOn(commonMain) }
        linuxX64Main { dependsOn(desktopMain) }
        //mingwX64Main { dependsOn(desktopMain) }
        macosX64Main { dependsOn(desktopMain) }

        iosMain { dependsOn(commonMain) }
        iosArm64Main { dependsOn(iosMain) }
        iosArm32Main { dependsOn(iosMain) }
        iosX64Main { dependsOn(iosMain) }
        tvosArm64Main { dependsOn(iosMain) }
        tvosX64Main { dependsOn(iosMain) }
        watchosArm32Main { dependsOn(iosMain) }
        watchosArm64Main { dependsOn(iosMain) }
        watchosX86Main { dependsOn(iosMain) }
    }
}

dependencies {
    // Kotlin
    commonMainImplementation "org.jetbrains.kotlin:kotlin-stdlib-common:${setup.kotlin}"

    // Coroutines
    commonMainImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.kotlinCoroutines}"

    // Ktor
    commonMainImplementation "io.ktor:ktor-client-core:${versions.ktor}"
    commonMainImplementation "io.ktor:ktor-client-json:${versions.ktor}"
    commonMainImplementation "io.ktor:ktor-client-logging:${versions.ktor}"
    commonMainImplementation "io.ktor:ktor-client-serialization:${versions.ktor}"

    androidMainImplementation "io.ktor:ktor-client-android:${versions.ktor}"
    jvmMainImplementation "io.ktor:ktor-client-apache:${versions.ktor}"
    iosMainImplementation "io.ktor:ktor-client-ios:${versions.ktor}"
    desktopMainImplementation "io.ktor:ktor-client-curl:${versions.ktor}"
    jsMainImplementation "io.ktor:ktor-client-js:${versions.ktor}"

    // Serialize
    commonMainImplementation "org.jetbrains.kotlinx:kotlinx-serialization-json:${versions.kotlinxSerialization}"
}

compileKotlinJs {
    kotlinOptions.metaInfo = true
    kotlinOptions.sourceMap = true
    kotlinOptions.moduleKind = 'umd'
}

dokkaHtml.configure {
    dokkaSourceSets {
        configureEach {
            noAndroidSdkLink.set(false)
        }
    }
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from "$buildDir/javadoc"
}

apply from: "$rootDir/gradle/gradle-mvn-push.gradle"